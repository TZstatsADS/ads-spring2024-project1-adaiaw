plt.spec.ar <- function(w){
fw <- 1/(pi *(1+1.6*cos(w)+0.8^2))
plot(w, fw, type="l")
}
plt.spec.ar(w)
XT100 <- arima.sim(list(ar=c(-0.8)), n=100, sd=1)
spec.pgram(XT100, log="no")
XT1000 <- arima.sim(list(ar=c(-0.8)), n=1000, sd=1)
spec.pgram(XT1000, log="no")
XT100 <- arima.sim(list(ar=c(-0.8)), n=100, sd=1)
spec.pgram(XT100, log="no")
a=-0.62
lag=4
-0.62^lag/sqrt(1/(1-a^2))
sigma2=7.9^2
a=0.31
b=0.76
b*sigma2
varxt=sigma2*(1+a^2)
varyt=sigma2*(1+b^2)
a*sigma2/sqrt(varxt*varyt)
7.9^2
7.9^2*0.31*0.76*7.9^2
7.9^2*0.31*0.76
0.31*0.76
7.9^2
7.9^2*0.31
7.9^2*0.76
7.9^2+0.31*0.76*7.9^2
r0 = 7.9^2+0.31*0.76*7.9^2
r0
r0 = 7.9^2+0.31*0.76*7.9^2
varxt= 7.9^2 + 0.31^2*7.9^2
varyt= 7.9^2 + 0.76^2*7.9^2
p0=r0/sqrt(varxt*varyt)
p0
knitr::opts_chunk$set(echo = TRUE)
vector1 <- c(3.1, 4.1, 5.1, 6.1, 7.1, 8.1)
knitr::opts_chunk$set(echo = TRUE)
vector1 <- c(3.1, 4.1, 5.1, 6.1, 7.1, 8.1)
vector1
print(vector1)
vector2 <- seq(from = 3.1, to = 8.1, by = 1)
print(vector2)
vector3 <- seq(from = 3.1, to = 8.1, length.out = 5)
print(vector3)
vector3 <- seq(from = 3.1, to = 8.1, length.out = 6)
print(vector3)
vector1 <- append(vector1, 10, after = 0)
print(vector1)
vector1 <- append(vector1, 20, after = 1)
print(vector1)
vector1 <- append(vector1, 20, after = 2)
print(vector1)
vector1 <- append(vector1, 10, after = 0)
print(vector1)
vector1 <- c(3.1, 4.1, 5.1, 6.1, 7.1, 8.1)
print(vector1)
vector1 <- append(vector1, 10, after = 0)
print(vector1)
vector1 <- append(vector1, 20, after = 2)
print(vector1)
vector1 <- append(vector1, 30, after = 5)
print(vector1)
vector4 <-  c(2, 3, 6, 10, 15, 18, 22, 25, 27, 30, 31, 35, 42)
vector4 <-  c(2, 3, 6, 10, 15, 18, 22, 25, 27, 30, 31, 35, 42)
print(vector4)
vector5 <- vector4[(vector4 > 5) & (vector4/3)]
print(vector5)
vector5 <- vector4[(vector4 > 5) & (vector4%%3)]
print(vector5)
vector5 <- vector4[(vector4 > 5) & if(vector4%%3==0)]
vector5 <- vector4[(vector4 > 5) & (vector4%%3==0)]
print(vector5)
print(27 %in% vector5)
list1 <- list(c(1,50,88), c(“yesterday”, “today”, “tomorrow”), 22.5, c(33.8, 42), "class_0001")
list1 <- list(c(1,50,88), c("yesterday", "today", "tomorrow"), 22.5, c(33.8, 42), "class_0001")
print(list1)
unlist(list1)
x -> (2, 4, 3, 2, 4, 5)
y -> (20, 60, 46, 27, 61, 77)
source("~/.active-rstudio-document", echo=TRUE)
x = (2, 4, 3, 2, 4, 5)
y = (20, 60, 46, 27, 61, 77)
x = c(2, 4, 3, 2, 4, 5)
y = c(20, 60, 46, 27, 61, 77)
reg -> lm(y~x)
reg = lm(y~x)
summary(reg)
plot(reg)
reg = lm(y~x)
summary(reg)
plot(x,y)
plot(x,y)
abline(lm(y ~ x))
x1 <- c(2, 4, 3, 2, 4, 5)
y1 <- c(20, 60, 46, 27, 61, 77)
reg2 <- lm(y1~x1)
summary(reg2)
plot(x1,y1)
abline(lm(y1 ~ x1))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg3 <- lm(y2~x2)
summary(reg3)
plot(x2,y2)
abline(lm(y2 ~ x2))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg2 <- lm(y2~x2)
summary(reg2)
plot(x2,y2)
abline(lm(y2 ~ x2))
summary(reg1)
x1 <- c(2, 4, 3, 2, 4, 5)
y1 <- c(20, 60, 46, 27, 61, 77)
reg1 <- lm(y1~x1)
summary(reg1)
plot(x1,y1)
abline(lm(y1 ~ x1))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg2 <- lm(y2~x2)
summary(reg2)
plot(x2,y2)
abline(lm(y2 ~ x2))
mean(x2)
mean(y2)
x1 <- c(2, 4, 3, 2, 4, 5)
y1 <- c(20, 60, 46, 27, 61, 77)
reg1 <- lm(y1~x1)
summary(reg1)
plot(x1,y1)
abline(lm(y1 ~ x1))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg2 <- lm(y2~x2)
summary(reg2)
plot(x2,y2)
abline(lm(y2 ~ x2))
plot(x,y) + points(xbar, ybar, col='red') + abline(lm(y2 ~ x2))
xbar <- mean(x)
ybar <- mean(y)
plot(x,y) + points(xbar, ybar, col='red') + abline(lm(y2 ~ x2))
xbar <- mean(x2)
ybar <- mean(y2)
plot(x2,y2) + points(xbar, ybar, col='red') + abline(lm(y2 ~ x2))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
library(igraph)
install.packages("igraph")
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
library(igraph)
```{r read data, warning=FALSE, message=FALSE,echo=FALSE}
getwd()
urlfile <-'../data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
corpus <- VCorpus(VectorSource(hm_data$cleaned_hm))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords, character(0))%>%
tm_map(stripWhitespace)
View(hm_data)
View(hm_data)
View(corpus)
View(corpus)
stemmed <- tm_map(corpus, stemDocument) %>%
tidy() %>%
select(text)
dict <- tidy(corpus) %>%
select(text) %>%
unnest_tokens(dictionary, text)
View(stemmed)
View(stemmed)
data("stop_words")
word <- c("happy","ago","yesterday","lot","today","months","month",
"happier","happiest","last","week","past","day","time")
stop_words <- stop_words %>%
bind_rows(mutate(tibble(word), lexicon = "updated"))
View(stop_words)
completed <- stemmed %>%
mutate(id = row_number()) %>%
unnest_tokens(stems, text) %>%
bind_cols(dict) %>%
anti_join(stop_words, by = c("dictionary" = "word"))
completed <- completed %>%
group_by(stems) %>%
count(dictionary) %>%
mutate(word = dictionary[which.max(n)]) %>%
ungroup() %>%
select(stems, word) %>%
distinct() %>%
right_join(completed) %>%
select(-stems)
completed <- completed %>%
group_by(id) %>%
summarise(text = str_c(word, collapse = " ")) %>%
ungroup()
hm_data <- hm_data %>%
mutate(id = row_number()) %>%
inner_join(completed)
write_csv(hm_data, "../output/processed_moments.csv")
# Step 1 - Load the processed text data along with demographic information on contributors
# We use the processed data for our analysis and combine it with the demographic information available.
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'../data/demographic.csv'
demo_data <- read_csv(urlfile)
View(hm_data)
# Step 1 - Load the processed text data along with demographic information on contributors
# We use the processed data for our analysis and combine it with the demographic information available.
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'../data/demographic.csv'
demo_data <- read_csv(urlfile)
# Combine both the data sets and keep the required columns for analysis
# We select a subset of the data that satisfies specific row conditions.
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
predicted_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married","divorced","separated","widowed")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
View(hm_data)
hm_data_mother <- hm_data[hm_data$gender=="f" & hm_data$parenthood=="y",]
hm_data_notmother <- hm_data[hm_data$gender=="f" & hm_data$parenthood=="n",]
hm_data_female <- hm_data[hm_data$gender=="f",]
bag_of_words_female <-  hm_data_female %>%
unnest_tokens(word, text)
word_count_female <- bag_of_words_female %>%
count(word, sort = TRUE)
temp <- bag_of_words_female %>%
count(parenthood, word) %>%
group_by(parenthood) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(parenthood, proportion)
ggplot(temp,
aes_string(x = colnames(temp)[2], y = colnames(temp)[3]),
color = abs(colnames(temp)[3] - colnames(temp)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
labs(title="Words Proportion for females with/without parenthood")+
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
hm_data_father <- hm_data[hm_data$gender=="m" & hm_data$parenthood=="y",]
hm_data_notfather <- hm_data[hm_data$gender=="m" & hm_data$parenthood=="n",]
hm_data_male <- hm_data[hm_data$gender=="m",]
#table(hm_data_notmother$age)
#table(hm_data_mother$age)
hm_data_father <- hm_data[hm_data$gender=="m" & hm_data$parenthood=="y",]
hm_data_notfather <- hm_data[hm_data$gender=="m" & hm_data$parenthood=="n",]
hm_data_male <- hm_data[hm_data$gender=="m",]
#table(hm_data_notmother$age)
#table(hm_data_mother$age)
bag_of_words_male <-  hm_data_male %>%
unnest_tokens(word, text)
word_count_male <- bag_of_words_male %>%
count(word, sort = TRUE)
temp <- bag_of_words_male %>%
count(parenthood, word) %>%
group_by(parenthood) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(parenthood, proportion)
ggplot(temp,
aes_string(x = colnames(temp)[2], y = colnames(temp)[3]),
color = abs(colnames(temp)[3] - colnames(temp)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
labs(title="Words Proportion for males with/without parenthood")+
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
bag_of_words_mother <-  hm_data_mother %>%
unnest_tokens(word, text)
word_count_mother <- bag_of_words_mother %>%
count(word, sort = TRUE)
bag_of_words_notmother <-  hm_data_notmother %>%
unnest_tokens(word, text)
word_count_notmother <- bag_of_words_notmother %>%
count(word, sort = TRUE)
wordcloud(word_count_mother$word,word_count_mother$n ,
scale=c(3,0.1),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Oranges"))
View(word_count_mother)
wordcloud(word_count_notmother$word,word_count_notmother$n ,
scale=c(3,0.1),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Oranges"))
bag_of_words_father <-  hm_data_father %>%
unnest_tokens(word, text)
word_count_father <- bag_of_words_father %>%
count(word, sort = TRUE)
bag_of_words_notfather <-  hm_data_notfather %>%
unnest_tokens(word, text)
word_count_notfather <- bag_of_words_notfather %>%
count(word, sort = TRUE)
wordcloud(word_count_father$word,word_count_father$n ,
scale=c(3,0.1),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
wordcloud(word_count_notfather$word,word_count_notfather$n ,
scale=c(3,0.1),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
word_count_mother[1:15,] %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
labs(title = "Word Frequency in Happy Moments for mothers")+
xlab(NULL) +
ylab("Word Frequency")+
coord_flip()
word_count_father[1:15,] %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
labs(title ="Word Frequency in Happy Moments for fathers")+
xlab(NULL) +
ylab("Word Frequency")+
coord_flip()
hm_data_motherchild <- hm_data_mother[grepl("baby",hm_data_mother$text)|grepl("child",hm_data_mother$text)|grepl("son",hm_data_mother$text)|grepl("daughter",hm_data_mother$text)|grepl("kid",hm_data_mother$text),]
nrow(hm_data_motherchild)
bag_of_words_motherchild <-  hm_data_motherchild %>%
unnest_tokens(word, text)
word_count_motherchild <- bag_of_words_motherchild %>%
count(word, sort = TRUE)
word_count_motherchild<- word_count_motherchild[-c(which(word_count_motherchild$word=="baby"),which(word_count_motherchild$word=="child"),which(word_count_motherchild$word=="son"),which(word_count_motherchild$word=="daughter"),which(word_count_motherchild$word=="kid"),which(word_count_motherchild$word=="kids"),which(word_count_motherchild$word=="children")),]
word_count_motherchild[1:20,] %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
ylab("Word Frequency")+
coord_flip()
wordcloud(word_count_motherchild$word,word_count_motherchild$n ,
scale=c(3,0.1),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Accent"))
hm_data_motherchild[grepl("school",hm_data_motherchild$text),"original_hm"][c(1,2,7,10,11,21),]
hm_data_motherhusband <- hm_data_mother[grepl("husband",hm_data_mother$text),]
nrow(hm_data_motherhusband)
bag_of_words_motherhusband <-  hm_data_motherhusband %>%
unnest_tokens(word, text)
word_count_motherhusband <- bag_of_words_motherhusband %>%
count(word, sort = TRUE)
word_count_motherhusband<- word_count_motherhusband[-c(which(word_count_motherhusband$word=="husband")),]
word_count_motherhusband[1:20,] %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
ylab("Word Frequency")+
coord_flip()
wordcloud(word_count_motherhusband$word,word_count_motherhusband$n ,
scale=c(4,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Accent"))
hm_data_motherhusband[grepl("home",hm_data_motherhusband$text),"original_hm"][c(2,3),]
hm_data_motherhusband[grepl("dinner",hm_data_motherhusband$text),"original_hm"][c(1,2),]
hm_data_motherhusband[grepl("surprise",hm_data_motherhusband$text),"original_hm"][c(2,3),]
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
summary(cars)
```{r cars}
summary(cars)
```{r pressure, echo=FALSE}
plot(pressure)
library(ngram)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
library(igraph)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
#library(igraph)
library(ggraph)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
library(ggraph)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
library(igraph)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
#library(igraph)
library(ggraph)
library(ggraph)
#library(ggraph)
library(rsconnect)
hm_data <- read_csv('../data/cleaned_hm.csv')
urlfile <-'../data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
urlfile <-'../documents/data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
getwd()
setwd("~/Documents/GitHub/ads-spring2024-project1-adaiaw/data")
setwd("~/Documents/GitHub/ads-spring2024-project1-adaiaw")
urlfile <-'../data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
urlfile <-'../data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
urlfile <-'../data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
urlfile <-'../data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
setwd("~/Documents/GitHub/ads-spring2024-project1-adaiaw/data")
urlfile <-'cleaned_hm.csv'
hm_data <- read_csv(urlfile)
cleaned_hm_data <- read_csv('cleaned_hm.csv')
view(cleaned_hm_data)
corpus <- VCorpus(VectorSource(hm_data$cleaned_hm))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords, character(0))%>%
tm_map(stripWhitespace)
View(corpus)
